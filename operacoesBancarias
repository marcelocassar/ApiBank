let { contas, saques, depositos, transferencias } = require("../bancodedados");

const criarConta = (req, res) => {

  const { nome, cpf, data_nascimento, telefone, email, senha } = req.body;

  const verificaCPF = contas.find((conta) => {
    return conta.usuario.cpf === cpf;
  });

  const verificaEmail = contas.find((conta) => {
    return conta.usuario.email === email;
  });

  if (verificaCPF) {
    return res.status(400).json({ Mensagem: "Este CPF já está cadastrado." });
  }

  if (verificaEmail) {
    return res.status(400).json({ Mensagem: "Este email já está cadastrado." });
  }

  let contadorID =
    contas.length === 0 ? 1 : contas[contas.length - 1].numero + 1;

  contas.push({
    numero: contadorID,
    saldo: 0,
    usuario: { nome, cpf, data_nascimento, telefone, email, senha },
  });

  return res.status(201).json();
      
}

const listarContas = (req, res) => {
  if (contas.length === 0) {
    return res.status(204).json({Mensagem: 'Nenhuma conta cadastrada.'});
  }
  return res.status(200).json(contas);
};

const atualizarUsuario = (req, res) => {
  const { nome, cpf, data_nascimento, telefone, email, senha } = req.body;
  const { numeroConta } = req.params;
  
  const verificaNumConta = contas.find((conta) => {
    return conta.numero === Number(numeroConta);
  });

  if (!verificaNumConta || isNaN(numeroConta)) {
    return res.status(404).json({
      Mensagem:
        "Esta conta não existe.",
    });
  }

  const verificaCPFOutrasContas = contas
    .filter((outrasContas) => {
      return outrasContas.numero !== Number(numeroConta);
    })
    .find((conta) => {
      return conta.cpf === cpf;
    });

  const verificaEmailOutrasContas = contas
    .filter((outrasContas) => {
      return outrasContas.numero !== Number(numeroConta);
    })
    .find((conta) => {
      return conta.usuario.email === email;
    });

  if (verificaCPFOutrasContas) {
    return res
      .status(400)
      .json({ Mensagem: "Este CPF já está cadastrado em outra conta." });
  }

  if (verificaEmailOutrasContas) {
    return res
      .status(400)
      .json({ Mensagem: "Este email já está cadastrado em outra conta." });
  }

  const contaDoUsuario = contas.find((conta) => {
    return conta.numero === Number(numeroConta);
  });

  contaDoUsuario.usuario.nome = nome;
  contaDoUsuario.usuario.cpf = cpf;
  contaDoUsuario.usuario.data_nascimento = data_nascimento;
  contaDoUsuario.usuario.telefone = telefone;
  contaDoUsuario.usuario.email = email;
  contaDoUsuario.usuario.senha = senha;

  return res.status(200).json();
};

const excluirConta = (req, res) => {

  const { numeroConta } = req.params;
  const verificaID = contas.find((conta) => {
    return conta.numero === Number(numeroConta);
  });

  if (!verificaID || isNaN(numeroConta)) {
    return res.status(404).json({Mensagem:"Conta inexistente no banco de dados."});
  }

  if (verificaID.saldo !== 0) {
    return res
      .status(400)
      .json({ Mensagem: "Retire todo o dinheiro da conta, antes de deletar. A conta só pode ser removida se o saldo for zero!" });
  }

  contas = contas.filter((conta) => {
    return conta.numero !== Number(numeroConta);
  });

  return res.status(200).json();
};


const depositar = (req, res) => {

  const { numero_conta, valor } = req.body;

  if (Number(valor) <= 0){
    res.status(400).json({Mensagem: "Digite um valor acima de ZERO."})
  }
  
  const verificaNumConta = contas.find((conta) => {
    return conta.numero === Number(numero_conta);
  });

  if(!verificaNumConta){
    res.status(400).json({Mensagem: "Conta inexistente."});
  }

  depositos.push({
    numero_conta: numero_conta,
    valor: valor,
  });

  verificaNumConta.saldo += valor;

  return res.status(201).json({Mensagem: `Depósito realizado com sucesso, no valor de ${valor}`});

}

const sacar = (req, res) => {

  const { numero_conta, valor, senha } = req.body;

  if (!numero_conta) {
    return res.status(400).json({ Mensagem: "Número da conta é obrigatório!" });
  }

  if (!valor) {
    return res.status(400).json({ Mensagem: "Valor é obrigatório!" });
  }


  if (!senha) {
    return res.status(400).json({ Mensagem: "Senha é obrigatório!" });
  }

  const verificarConta = contas.find((conta) => {
    return conta.numero === Number(numero_conta);
  });

  if (!verificarConta) {return res.status(400).json({ Mensagem: "Conta inexistente." })};

  if (valor <= 0) {return res.status(400).json({Mensagem: "Valor do depósito precisa ser maior que ZERO."})}

  if (senha !== verificarConta.usuario.senha) {
    return res.status(400).json({ Mensagem: "Senha incorreta" });
  }

  if (verificarConta.saldo < valor) {
    return res.status(400).json({ Mensagem: "O saldo insuficiente." })};

  saques.push({    
    numero_conta: numero_conta,
    valor,
  });

  verificarConta.saldo -= valor;

  return res.status(200).json();

}

const transferir = (req, res) => {
//não consegui fazer o código.
}

const consultarSaldo = (req, res) => {
  const { numero_conta, senha } = req.query;

  if (!numero_conta || isNaN(numero_conta) || !senha) {
    res.status(400).json({
      Mensagem: "O número da conta e senha são obrigatórios.",
    });
  }

  const verificarConta = contas.find((conta) => {
    return conta.numero === Number(numero_conta);
  });

  if (!verificarConta) {
    return res
      .status(400)
      .json({ Mensagem: "Esta conta bancária não existe." });
  }

  if (senha !== verificarConta.usuario.senha) {
    return res.status(400).json({ Mensagem: "Senha incorreta" });
  }

  return res.status(200).json(verificarConta.saldo);
};


const emitirExtrato = (req, res) => {

  const { numero_conta, senha } = req.query;

  if (!numero_conta || isNaN(numero_conta) || !senha) {
    res.status(400).json({
      Mensagem: "O número da conta e senha são obrigatórios.",
    });
  }

  const verificarConta = contas.find((conta) => {
    return conta.numero === Number(numero_conta);
  });

  if (!verificarConta) {
    return res
      .status(400)
      .json({ Mensagem: "Esta conta bancária não existe." });
  }

  if (senha !== verificarConta.usuario.senha) {
    return res.status(400).json({ Mensagem: "Senha incorreta" });
  }

  const depositosConta = depositos.filter((deposito) => {
    return Number(deposito.numero_conta) === Number(verificarConta.numero);
  });

  const saquesConta = saques.filter((saque) => {
    return Number(saque.numero_conta) === Number(verificarConta.numero);
  });

  const transferenciasEnviadasConta = transferencias.filter((transferencia) => {
    return (
      Number(transferencia.numero_conta_origem) ===
      Number(verificarConta.numero)
    );
  });

  const transferenciasRecebidasConta = transferencias.filter(
    (transferencia) => {
      return (
        Number(transferencia.numero_conta_destino) ===
        Number(verificarConta.numero)
      );
    }
  );

  return res.status(200).json({
    depositos: depositosConta,
    saques: saquesConta,
    transferenciasEnviadas: transferenciasEnviadasConta,
    transferenciasRecebidas: transferenciasRecebidasConta,
  });
};
 
module.exports = {
    criarConta,
    listarContas,
    atualizarUsuario,
    excluirConta,
    depositar,
    sacar,
    transferir,
    consultarSaldo,
    emitirExtrato,
}